services:
  db:
    image: postgres:15
    container_name: project1_db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Expose DB port for local development access
    ports:
      - "127.0.0.1:5433:5432"  # Use port 5433 to avoid conflictscls
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: project1_redis
    ports:
      - "127.0.0.1:6380:6379"  # avoid host port clash with local Redis service
    restart: unless-stopped

  web:
    build: .
    container_name: project1_web
    ports:
      - "${HOST_IP:-127.0.0.1}:${PORT:-8004}:${PORT:-8004}"    # access via http://${HOST_IP:-127.0.0.1}:${PORT:-8004}
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=australia_job_scraper.settings_dev
      - RUNNING_IN_DOCKER=1
      - DB_NAME=${DB_NAME:-australia_job_scraper}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-Evolgroup@123}
      - DB_HOST=host.docker.internal
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis  # Use local host Postgres; no dependency on internal db service
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:${PORT:-8004}"
    healthcheck:  # [cursor:reason] Basic healthcheck using wget (available in image)
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:${PORT:-8004}/"]
      interval: 30s
      timeout: 10s
      retries: 5

  celery_worker:
    build: .
    container_name: project1_celery_worker
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=australia_job_scraper.settings_dev
      - RUNNING_IN_DOCKER=1
      - DB_NAME=${DB_NAME:-australia_job_scraper}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-Evolgroup@123}
      - DB_HOST=host.docker.internal
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis  # Use local host Postgres; no dependency on internal db service
    restart: unless-stopped
    command: >
      sh -c "celery -A australia_job_scraper worker -l info"
    healthcheck:  # [cursor:reason] Ensure worker can connect to broker and respond to inspect
      test: ["CMD-SHELL", "celery -A australia_job_scraper inspect registered >/dev/null 2>&1"]
      interval: 30s
      timeout: 10s
      retries: 5

  celery_beat:
    build: .
    container_name: project1_celery_beat
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=australia_job_scraper.settings_dev
      - RUNNING_IN_DOCKER=1
      - DB_NAME=${DB_NAME:-australia_job_scraper}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-Evolgroup@123}
      - DB_HOST=host.docker.internal
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis  # Use local host Postgres; no dependency on internal db service
    restart: unless-stopped
    command: >
      sh -c "celery -A australia_job_scraper beat -l info"
    healthcheck:  # [cursor:reason] Verify beat creates its schedule file or has started
      test: ["CMD-SHELL", "test -f /app/celerybeat-schedule || test -f /tmp/celerybeat-schedule || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # [cursor:reason] Flower removed per request; monitoring UI not needed

volumes:
  postgres_data:
